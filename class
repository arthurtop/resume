
<!DOCTYPE html>



  


<html class="theme-next pisces use-motion" lang="zh-Hans">
<head>
  <meta charset="UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=edge" />
<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1"/>
<meta name="theme-color" content="#222">



  
  
    
    
  <script src="/lib/pace/pace.min.js?v=1.0.2"></script>
  <link href="/lib/pace/pace-theme-flash.min.css?v=1.0.2" rel="stylesheet">

  <script>
    (function(){
        if(''){
            if (prompt('请输入文章密码') !== ''){
                alert('密码错误！');
                history.back();
            }
        }
    })();
  </script>








<meta http-equiv="Cache-Control" content="no-transform" />
<meta http-equiv="Cache-Control" content="no-siteapp" />





  <script>
  (function(i,s,o,g,r,a,m){i["DaoVoiceObject"]=r;i[r]=i[r]||function(){(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;a.charset="utf-8";m.parentNode.insertBefore(a,m)})(window,document,"script",('https:' == document.location.protocol ? 'https:' : 'http:') + "//widget.daovoice.io/widget/0f81ff2f.js","daovoice")
  daovoice('init', {
      app_id: "a85a9be2"
    });
  daovoice('update');
  </script>














  
  
  <link href="/lib/fancybox/source/jquery.fancybox.css?v=2.1.5" rel="stylesheet" type="text/css" />







<link href="/lib/font-awesome/css/font-awesome.min.css?v=4.6.2" rel="stylesheet" type="text/css" />

<link href="/css/main.css?v=5.1.4" rel="stylesheet" type="text/css" />


  <link rel="apple-touch-icon" sizes="180x180" href="/images/apple-touch-icon-next.png?v=5.1.4">


  <link rel="icon" type="image/png" sizes="32x32" href="/images/favicon-32x32-next.png?v=5.1.4">


  <link rel="icon" type="image/png" sizes="16x16" href="/images/favicon-16x16-next.png?v=5.1.4">


  <link rel="mask-icon" href="/images/logo.svg?v=5.1.4" color="#222">





  <meta name="keywords" content="Node.js,Socket,WebSocket,Socket.IO," />





  <link rel="alternate" href="/atom.xml" title="TitanKing" type="application/atom+xml" />






<meta name="keywords" content="Node.js,Socket,WebSocket,Socket.IO">
<meta property="og:type" content="article">
<meta property="og:title" content="Socket搭建即时通讯服务器">
<meta property="og:url" content="https://titanjun.top/2018/11/16/Socket搭建即时通讯服务器/index.html">
<meta property="og:site_name" content="TitanKing">
<meta property="og:locale" content="zh-Hans">
<meta property="og:image" content="http://pcat1usdp.bkt.clouddn.com/WebSocket1.png">
<meta property="og:image" content="http://pcat1usdp.bkt.clouddn.com/webServer.jpg">
<meta property="og:updated_time" content="2018-11-16T08:01:04.781Z">
<meta name="twitter:card" content="summary">
<meta name="twitter:title" content="Socket搭建即时通讯服务器">
<meta name="twitter:image" content="http://pcat1usdp.bkt.clouddn.com/WebSocket1.png">



<script type="text/javascript" id="hexo.configurations">
  var NexT = window.NexT || {};
  var CONFIG = {
    root: '/',
    scheme: 'Pisces',
    version: '5.1.4',
    sidebar: {"position":"left","display":"always","offset":3,"b2t":false,"scrollpercent":true,"onmobile":true},
    fancybox: true,
    tabs: true,
    motion: {"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},
    duoshuo: {
      userId: '0',
      author: '博主'
    },
    algolia: {
      applicationID: '',
      apiKey: '',
      indexName: '',
      hits: {"per_page":10},
      labels: {"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}
    }
  };
</script>



  <link rel="canonical" href="https://titanjun.top/2018/11/16/Socket搭建即时通讯服务器/"/>





  <title>Socket搭建即时通讯服务器 | TitanKing</title>
  





  <script type="text/javascript">
    var _hmt = _hmt || [];
    (function() {
      var hm = document.createElement("script");
      hm.src = "https://hm.baidu.com/hm.js?d6dd8cf28eb4a5f6451fa0cd10918824";
      var s = document.getElementsByTagName("script")[0];
      s.parentNode.insertBefore(hm, s);
    })();
  </script>




</head>

<body itemscope itemtype="http://schema.org/WebPage" lang="zh-Hans">

  
  
    
  

  <div class="container sidebar-position-left page-post-detail">
    <div class="headband"></div>

    <a href="https://github.com/CoderTitan"><img style="position: absolute; top: 0; right: 0; border: 0;" src="https://s3.amazonaws.com/github/ribbons/forkme_right_darkblue_121621.png" alt="Fork me on GitHub"></a>

    <header id="header" class="header" itemscope itemtype="http://schema.org/WPHeader">
      <div class="header-inner"><div class="site-brand-wrapper">
  <div class="site-meta ">
    

    <div class="custom-logo-site-title">
      <a href="/"  class="brand" rel="start">
        <span class="logo-line-before"><i></i></span>
        <span class="site-title">TitanKing</span>
        <span class="logo-line-after"><i></i></span>
      </a>
    </div>
      
        <p class="site-subtitle">技术博客</p>
      
  </div>

  <div class="site-nav-toggle">
    <button>
      <span class="btn-bar"></span>
      <span class="btn-bar"></span>
      <span class="btn-bar"></span>
    </button>
  </div>
</div>

<nav class="site-nav">
  

  
    <ul id="menu" class="menu">
      
        
        <li class="menu-item menu-item-home">
          <a href="/" rel="section">
            
              <i class="menu-item-icon fa fa-fw fa-home"></i> <br />
            
            首页
          </a>
        </li>
      
        
        <li class="menu-item menu-item-archives">
          <a href="/archives/" rel="section">
            
              <i class="menu-item-icon fa fa-fw fa-archive"></i> <br />
            
            列表
          </a>
        </li>
      
        
        <li class="menu-item menu-item-categories">
          <a href="/categories/" rel="section">
            
              <i class="menu-item-icon fa fa-fw fa-th"></i> <br />
            
            分类
          </a>
        </li>
      
        
        <li class="menu-item menu-item-tags">
          <a href="/tags/" rel="section">
            
              <i class="menu-item-icon fa fa-fw fa-tags"></i> <br />
            
            标签
          </a>
        </li>
      
        
        <li class="menu-item menu-item-about">
          <a href="/about/" rel="section">
            
              <i class="menu-item-icon fa fa-fw fa-user"></i> <br />
            
            关于
          </a>
        </li>
      
        
        <li class="menu-item menu-item-navigation">
          <a href="/navigation/" rel="section">
            
              <i class="menu-item-icon fa fa-fw fa-globe"></i> <br />
            
            导航
          </a>
        </li>
      

      
        <li class="menu-item menu-item-search">
          
            <a href="javascript:;" class="popup-trigger">
          
            
              <i class="menu-item-icon fa fa-search fa-fw"></i> <br />
            
            搜索
          </a>
        </li>
      
    </ul>
  

  
    <div class="site-search">
      
  <div class="popup search-popup local-search-popup">
  <div class="local-search-header clearfix">
    <span class="search-icon">
      <i class="fa fa-search"></i>
    </span>
    <span class="popup-btn-close">
      <i class="fa fa-times-circle"></i>
    </span>
    <div class="local-search-input-wrapper">
      <input autocomplete="off"
             placeholder="搜索..." spellcheck="false"
             type="text" id="local-search-input">
    </div>
  </div>
  <div id="local-search-result"></div>
</div>



    </div>
  
</nav>



 </div>
    </header>

    <main id="main" class="main">
      <div class="main-inner">
        <div class="content-wrap">
          <div id="content" class="content">
            

  <div id="posts" class="posts-expand">
    

  

  
  
  

  <article class="post post-type-normal" itemscope itemtype="http://schema.org/Article">
  
  
  
  <div class="post-block">
    <link itemprop="mainEntityOfPage" href="https://titanjun.top/2018/11/16/Socket搭建即时通讯服务器/">

    <span hidden itemprop="author" itemscope itemtype="http://schema.org/Person">
      <meta itemprop="name" content="TitanKing">
      <meta itemprop="description" content="">
      <meta itemprop="image" content="/uploads/avatar.jpg">
    </span>

    <span hidden itemprop="publisher" itemscope itemtype="http://schema.org/Organization">
      <meta itemprop="name" content="TitanKing">
    </span>

    
      <header class="post-header">

        
        
          <h1 class="post-title" itemprop="name headline">Socket搭建即时通讯服务器</h1>
        

        <div class="post-meta">
          <span class="post-time">
            
              <span class="post-meta-item-icon">
                <i class="fa fa-calendar-o"></i>
              </span>
              
                <span class="post-meta-item-text">发表于</span>
              
              <time title="创建于" itemprop="dateCreated datePublished" datetime="2018-11-16T11:45:00+08:00">
                2018-11-16
              </time>
            

            

            
          </span>

          
            <span class="post-category" >
            
              <span class="post-meta-divider">|</span>
            
              <span class="post-meta-item-icon">
                <i class="fa fa-folder-o"></i>
              </span>
              
                <span class="post-meta-item-text">分类于</span>
              
              
                <span itemprop="about" itemscope itemtype="http://schema.org/Thing">
                  <a href="/categories/Socket学习笔记/" itemprop="url" rel="index">
                    <span itemprop="name">Socket学习笔记</span>
                  </a>
                </span>

                
                
              
            </span>
          

          
            
              <span class="post-comments-count">
                <span class="post-meta-divider">|</span>
                <span class="post-meta-item-icon">
                  <i class="fa fa-comment-o"></i>
                </span>
                <a href="/2018/11/16/Socket搭建即时通讯服务器/#comments" itemprop="discussionUrl">
                  <span class="post-comments-count valine-comment-count" data-xid="/2018/11/16/Socket搭建即时通讯服务器/" itemprop="commentCount"></span>
                </a>
              </span>
            
          

          
          
             <span id="/2018/11/16/Socket搭建即时通讯服务器/" class="leancloud_visitors" data-flag-title="Socket搭建即时通讯服务器">
               <span class="post-meta-divider">|</span>
               <span class="post-meta-item-icon">
                 <i class="fa fa-eye"></i>
               </span>
               
                 <span class="post-meta-item-text">阅读次数&#58;</span>
               
                 <span class="leancloud-visitors-count"></span>
             </span>
          

          

          
            <div class="post-wordcount">
              
                
                <span class="post-meta-item-icon">
                  <i class="fa fa-file-word-o"></i>
                </span>
                
                  <span class="post-meta-item-text">字数统计&#58;</span>
                
                <span title="字数统计">
                  4,868 字
                </span>
              

              
                <span class="post-meta-divider">|</span>
              

              
                <span class="post-meta-item-icon">
                  <i class="fa fa-clock-o"></i>
                </span>
                
                  <span class="post-meta-item-text">阅读时长 &asymp;</span>
                
                <span title="阅读时长">
                  19 分钟
                </span>
              
            </div>
          

          

        </div>
      </header>
    

    
    
    
    <div class="post-body" itemprop="articleBody">

      
      

      
        <p><img src="http://pcat1usdp.bkt.clouddn.com/WebSocket1.png" alt="webSecket"></p>
<a id="more"></a>
<h2 id="即时通讯"><a href="#即时通讯" class="headerlink" title="即时通讯"></a>即时通讯</h2><ul>
<li>相关代码<a href="https://github.com/CoderTitan/WebSocketDemo" target="_blank" rel="noopener">Demo地址</a></li>
<li>即时通讯<code>（Instant messaging，简称IM）</code>是一个终端服务，允许两人或多人使用网路即时的传递文字讯息、档案、语音与视频交流</li>
<li>即时通讯按使用用途分为企业即时通讯和网站即时通讯</li>
<li>根据装载的对象又可分为手机即时通讯和PC即时通讯，手机即时通讯代表是短信，网站、视频即时通讯</li>
</ul>
<h3 id="IM通信原理"><a href="#IM通信原理" class="headerlink" title="IM通信原理"></a>IM通信原理</h3><ul>
<li>客户端A与客户端B如何产生通信？客户端A不能直接和客户端B，因为两者相距太远。</li>
<li>这时就需要通过IM服务器，让两者产生通信.</li>
<li>客户端A通过<code>socket</code>与IM服务器产生连接,客户端B也通过<code>socket</code>与IM服务器产生连接</li>
<li>A先把信息发送给IM应用服务器，并且指定发送给B，服务器根据A信息中描述的接收者将它转发给B，同样B到A也是这样。</li>
<li>通讯问题: 服务器是不能主动连接客户端的，只能客户端主动连接服务器</li>
</ul>
<h3 id="即时通讯连接原理"><a href="#即时通讯连接原理" class="headerlink" title="即时通讯连接原理"></a>即时通讯连接原理</h3><ul>
<li>即时通讯都是长连接，基本上都是<a href="https://blog.csdn.net/linsongbin1/article/details/54980801/" target="_blank" rel="noopener">HTTP1.1</a>协议，设置<code>Connection</code>为<code>keep-alive</code>即可实现长连接，而<code>HTTP1.1</code>默认是长连接，也就是默认<code>Connection</code>的值就是<code>keep-alive</code></li>
<li>HTTP分为长连接和短连接，其实本质上是TCP连接，HTTP协议是应用层的协议，而TCP才是真正的传输层协议, IP是网络层协议，只有负责传输的这一层才需要建立连接</li>
<li>例如: 急送一个快递，HTTP协议指的那个快递单，你寄件的时候填的单子就像是发了一个HTTP请求。而TCP协议就是中间运货的运输工具，它是负责运输的，而运输工具所行驶的路就是所谓的TCP连接</li>
<li>HTTP短连接（非持久连接）是指，客户端和服务端进行一次HTTP请求/响应之后，就关闭连接。所以，下一次的HTTP请求/响应操作就需要重新建立连接。</li>
<li>HTTP长连接（持久连接）是指，客户端和服务端建立一次连接之后，可以在这条连接上进行多次请求/响应操作。持久连接可以设置过期时间，也可以不设置</li>
</ul>
<h3 id="即时通讯数据传递方式"><a href="#即时通讯数据传递方式" class="headerlink" title="即时通讯数据传递方式"></a>即时通讯数据传递方式</h3><p>目前实现即时通讯的有四种方式（短轮询、长轮询、SSE、<code>Websocket</code>）</p>
<h4 id="短轮询"><a href="#短轮询" class="headerlink" title="短轮询:"></a>短轮询:</h4><ul>
<li>每隔一小段时间就发送一个请求到服务器，服务器返回最新数据，然后客户端根据获得的数据来更新界面，这样就间接实现了即时通信</li>
<li>优点是简单，缺点是对服务器压力较大，浪费带宽流量（通常情况下数据都是没有发生改变的）。</li>
<li>主要是客户端人员写代码，服务器人员比较简单，适于小型应用</li>
</ul>
<h4 id="长轮询"><a href="#长轮询" class="headerlink" title="长轮询:"></a>长轮询:</h4><ul>
<li>客户端发送一个请求到服务器，服务器查看客户端请求的数据(服务器中数据)是否发生了变化（是否有最新数据），如果发生变化则立即响应返回，否则保持这个连接并定期检查最新数据，直到发生了数据更新或连接超时</li>
<li>同时客户端连接一旦断开，则再次发出请求，这样在相同时间内大大减少了客户端请求服务器的次数.</li>
<li>弊端:服务器长时间连接会消耗资源，返回数据顺序无保证，难于管理维护</li>
<li>底层实现:在服务器的程序中加入一个死循环，在循环中监测数据的变动。当发现新数据时，立即将其输出给浏览器并断开连接，浏览器在收到数据后，再次发起请求以进入下一个周期</li>
</ul>
<h4 id="SSE"><a href="#SSE" class="headerlink" title="SSE"></a>SSE</h4><ul>
<li>（<code>Server-sent Events</code>服务器推送事件）:为了解决浏览器只能够单向传输数据到服务端，HTML5提供了一种新的技术叫做服务器推送事件SSE</li>
<li>SSE技术提供的是从服务器单向推送数据给浏览器的功能，加上配合浏览器主动HTTP请求，两者结合起来,实际上就实现了客户端和服务器的双向通信.</li>
</ul>
<h4 id="WebSocket"><a href="#WebSocket" class="headerlink" title="WebSocket"></a>WebSocket</h4><ul>
<li>以上提到的这些解决方案中，都是利用浏览器单向请求服务器或者服务器单向推送数据到浏览器</li>
<li>而在HTML5中，为了加强web的功能，提供了<code>websocket</code>技术，它不仅是一种web通信方式，也是一种应用层协议</li>
<li>它提供了浏览器和服务器之间原生的全双工跨域通信，通过浏览器和服务器之间建立<code>websocket</code>连接,在同一时刻能够实现客户端到服务器和服务器到客户端的数据发送</li>
</ul>
<h2 id="WebSocket-1"><a href="#WebSocket-1" class="headerlink" title="WebSocket"></a>WebSocket</h2><ul>
<li><a href="http://websocket.org/" target="_blank" rel="noopener">WebSocket</a> 是一种网络通信协议。<a href="https://note.youdao.com/" target="_blank" rel="noopener">RFC6455</a> 定义了它的通信标准</li>
<li><code>WebSocket</code>是一种双向通信协议，在建立连接后，<code>WebSocket</code> 服务器和客户端都能主动的向对方发送或接收数据</li>
<li><code>WebSocket</code>是基于<code>HTTP</code>协议的，或者说借用了<code>HTTP</code>协议来完成一部分握手(连接)，在握手(连接)阶段与<code>HTTP</code>是相同的,只不过<code>HTTP</code>不能服务器给客户端推送，而<code>WebSocket</code>可以</li>
</ul>
<h3 id="WebSocket如何工作"><a href="#WebSocket如何工作" class="headerlink" title="WebSocket如何工作"></a>WebSocket如何工作</h3><ul>
<li>Web浏览器和服务器都必须实现<code>WebSockets</code>协议来建立和维护连接。</li>
<li>由于<code>WebSockets</code>连接长期存在，与典型的<code>HTTP</code>连接不同，对服务器有重要的影响</li>
<li>基于多线程或多进程的服务器无法适用于 <code>WebSockets</code>，因为它旨在打开连接，尽可能快地处理请求，然后关闭连接</li>
<li>任何实际的<code>WebSockets</code>服务器端实现都需要一个异步服务器</li>
</ul>
<p><img src="http://pcat1usdp.bkt.clouddn.com/webServer.jpg" alt="webServer"></p>
<h4 id="Websocket协议"><a href="#Websocket协议" class="headerlink" title="Websocket协议"></a><code>Websocket</code>协议</h4><p>协议头: ws, 服务器根据协议头判断是<code>Http</code>还是<code>websocket</code></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 请求头</span></span><br><span class="line">     GET ws:<span class="comment">//localhost:12345/websocket/test.html HTTP/1.1</span></span><br><span class="line">     Origin: http:<span class="comment">//localhost</span></span><br><span class="line">     Connection: Upgrade</span><br><span class="line">     Host: localhost:<span class="number">12345</span></span><br><span class="line">     Sec-WebSocket-Key: JspZdPxs9MrWCt3j6h7KdQ==  </span><br><span class="line">     Upgrade: websocket </span><br><span class="line">     Sec-WebSocket-Version: <span class="number">13</span></span><br><span class="line">    <span class="comment">// Sec-WebSocket-Key: 叫“梦幻字符串”是个密钥，只有有这个密钥 服务器才能通过解码认出来，这是个WB的请求，要建立TCP连接了！！！如果这个字符串没有按照加密规则加密，那服务端就认不出来，就会认为这整个协议就是个HTTP请求。更不会开TCP。其他的字段都可以随便设置，但是这个字段是最重要的字段，标识WB协议的一个字段</span></span><br><span class="line">     </span><br><span class="line"></span><br><span class="line"><span class="comment">// 响应头</span></span><br><span class="line">     HTTP/<span class="number">1.1</span> <span class="number">101</span> Web Socket Protocol Handshake</span><br><span class="line">     WebSocket-Location: ws:<span class="comment">//localhost:12345/websocket/test.php</span></span><br><span class="line">     Connection: Upgrade</span><br><span class="line">     Upgrade: websocket</span><br><span class="line">     Sec-WebSocket-Accept: zUyzbJdkVJjhhu8KiAUCDmHtY/o= </span><br><span class="line">     WebSocket-Origin: http:<span class="comment">//localhost</span></span><br><span class="line">     </span><br><span class="line">    <span class="comment">// Sec-WebSocket-Accept: 叫“梦幻字符串”，和上面那个梦幻字符串作用一样。不同的是，这个字符串是要让客户端辨认的，客户端拿到后自动解码。并且辨认是不是一个WB请求。然后进行相应的操作。这个字段也是重中之重，不可随便修改的。加密规则，依然是有规则的</span></span><br></pre></td></tr></table></figure>
<h3 id="WebSocket客户端"><a href="#WebSocket客户端" class="headerlink" title="WebSocket客户端"></a>WebSocket客户端</h3><p>在客户端，没有必要为<code>WebSockets</code>使用<code>JavaScript</code>库。实现<code>WebSockets</code>的<code>Web</code> 浏览器将通过<code>WebSockets</code>对象公开所有必需的客户端功能（主要指支持<code>HTML5</code>的浏览器）</p>
<h4 id="客户端-API"><a href="#客户端-API" class="headerlink" title="客户端 API"></a>客户端 API</h4><p>以下 API 用于创建<code>WebSocket</code>对象。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Socket = <span class="keyword">new</span> WebSocket(url, [protocol] );</span><br></pre></td></tr></table></figure>
<ul>
<li>以上代码中的第一个参数<code>url</code>, 指定连接的<code>URL</code></li>
<li>第二个参数<code>protocol</code>是可选的，指定了可接受的子协议</li>
</ul>
<h4 id="WebSocket属性"><a href="#WebSocket属性" class="headerlink" title="WebSocket属性"></a>WebSocket属性</h4><p>以下是<code>WebSocket</code>对象的属性。假定我们使用了以上代码创建了<code>Socket</code>对象</p>
<ul>
<li><code>Socket.readyState</code>: 只读属性<code>readyState</code>表示连接状态, 可以是以下值<ul>
<li>0 : 表示连接尚未建立</li>
<li>1 : 表示连接已建立，可以进行通信</li>
<li>2 : 表示连接正在进行关闭</li>
<li>3 : 表示连接已经关闭或者连接不能打开。</li>
</ul>
</li>
<li><code>Socket.bufferedAmount</code>: 只读属性<code>bufferedAmount</code><ul>
<li>表示已被<code>send()</code> 放入正在队列中等待传输，但是还没有发出的<code>UTF-8</code>文本字节数</li>
</ul>
</li>
</ul>
<h4 id="WebSocket事件"><a href="#WebSocket事件" class="headerlink" title="WebSocket事件"></a>WebSocket事件</h4><p>以下是<code>WebSocket</code>对象的相关事件。假定我们使用了以上代码创建了<code>Socket</code> 对象：</p>
<table>
<thead>
<tr>
<th>事件</th>
<th>事件处理程序</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>open</td>
<td>Socket.onopen</td>
<td>连接建立时触发</td>
</tr>
<tr>
<td>message</td>
<td>Socket.onmessage</td>
<td>客户端接收服务端数据时触发</td>
</tr>
<tr>
<td>error</td>
<td>Socket.onerror</td>
<td>通信发生错误时触发</td>
</tr>
<tr>
<td>close</td>
<td>Socket.onclose</td>
<td>连接关闭时触发</td>
</tr>
</tbody>
</table>
<h4 id="WebSocket方法"><a href="#WebSocket方法" class="headerlink" title="WebSocket方法"></a>WebSocket方法</h4><p>以下是<code>WebSocket</code>对象的相关方法。假定我们使用了以上代码创建了<code>Socket</code>对象：</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>Socket.send()</td>
<td>使用连接发送数据</td>
</tr>
<tr>
<td>Socket.close()</td>
<td>关闭连接</td>
</tr>
</tbody>
</table>
<div class="note success"><p>代码示例</p></div>

<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 客户端</span></span><br><span class="line"><span class="keyword">var</span> socket = <span class="keyword">new</span> WebSocket(<span class="string">"ws://localhost:9090"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 建立 web socket 连接成功触发事件</span></span><br><span class="line">socket.onopen = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 使用send发送数据</span></span><br><span class="line">    socket.send(<span class="string">"发送数据"</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(socket.bufferedAmount)</span><br><span class="line">    alert(<span class="string">'数据发送中'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接受服务端数据是触发事件</span></span><br><span class="line">socket.onmessage = <span class="function"><span class="keyword">function</span> (<span class="params">evt</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> received_msg = evt.data</span><br><span class="line">    alert(<span class="string">'数据已经接受..'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 断开 websocket 连接成功触发事件</span></span><br><span class="line">socket.onclose = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">'链接已经关闭'</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(socket.readyState)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="WebSocket服务端"><a href="#WebSocket服务端" class="headerlink" title="WebSocket服务端"></a>WebSocket服务端</h3><p><code>WebSocket</code>在服务端的实现非常丰富。<code>Node.js</code>、<code>Java</code>、<code>C++</code>、<code>Python</code> 等多种语言都有自己的解决方案, 其中<code>Node.js</code>常用的有以下三种</p>
<ul>
<li><a href="https://github.com/uNetworking/uWebSockets" target="_blank" rel="noopener">µWebSockets</a></li>
<li><a href="https://socket.io/" target="_blank" rel="noopener">Socket.IO</a></li>
<li><a href="https://github.com/theturtle32/WebSocket-Node" target="_blank" rel="noopener">WebSocket-Node</a></li>
</ul>
<p>下面就着重研究一下<code>Socket.IO</code>吧, 因为别的我也不会, 哈哈哈哈……</p>
<h2 id="Socket-IO"><a href="#Socket-IO" class="headerlink" title="Socket.IO"></a><code>Socket.IO</code></h2><ul>
<li><a href="https://github.com/socketio" target="_blank" rel="noopener">Socket.IO</a>是一个库，可以在浏览器和服务器之间实现实时，双向和基于事件的通信</li>
<li><a href="https://github.com/socketio" target="_blank" rel="noopener">Socket.IO</a>是一个完全由<code>JavaScript</code>实现、基于<code>Node.js</code>、支持<code>WebSocket</code>的协议用于实时通信、跨平台的开源框架</li>
<li><a href="https://github.com/socketio" target="_blank" rel="noopener">Socket.IO</a>包括了客户端(<code>iOS,Android</code>)和服务器端(<code>Node.js</code>)的代码，可以很好的实现iOS即时通讯技术</li>
<li><a href="https://github.com/socketio" target="_blank" rel="noopener">Socket.IO</a>支持及时、双向、基于事件的交流，可在不同平台、浏览器、设备上工作，可靠性和速度稳定</li>
<li><a href="https://github.com/socketio" target="_blank" rel="noopener">Socket.IO</a>实际上是<code>WebSocket</code>的父集，<code>Socket.io</code>封装了<code>WebSocket</code>和轮询等方法，会根据情况选择方法来进行通讯</li>
<li>典型的应用场景如：<ul>
<li>实时分析：将数据推送到客户端，客户端表现为实时计数器、图表、日志客户</li>
<li>实时通讯：聊天应用</li>
<li>二进制流传输：<code>socket.io</code>支持任何形式的二进制文件传输，例如图片、视频、音频等</li>
<li>文档合并：允许多个用户同时编辑一个文档，并能够看到每个用户做出的修改</li>
</ul>
</li>
</ul>
<h3 id="Socket-IO服务端"><a href="#Socket-IO服务端" class="headerlink" title="Socket.IO服务端"></a>Socket.IO服务端</h3><ul>
<li><a href="https://github.com/socketio" target="_blank" rel="noopener">Socket.IO</a>实质是一个库, 所以在使用之前必须先导入<code>Socket.IO</code>库</li>
<li><code>Node.js</code>导入库和<code>iOS</code>导入第三方库性质一样, 只不过<code>iOS</code>使用的是<code>pods</code>管理, <code>Node.js</code>使用<code>npm</code></li>
</ul>
<h4 id="导入Socket-IO库"><a href="#导入Socket-IO库" class="headerlink" title="导入Socket.IO库"></a>导入<code>Socket.IO</code>库</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 1. 进入当当前文件夹</span><br><span class="line">cd ...</span><br><span class="line"></span><br><span class="line">// 2. 创建package.json文件</span><br><span class="line">npm init</span><br><span class="line"></span><br><span class="line">/// 3. 导入库</span><br><span class="line">npm install socket.io --sava</span><br><span class="line">npm install express --sava</span><br></pre></td></tr></table></figure>
<h4 id="创建socket"><a href="#创建socket" class="headerlink" title="创建socket"></a>创建socket</h4><ul>
<li><code>socket</code>本质还是<code>http</code>协议，所以需要绑定<code>http</code>服务器，才能启动socket服务.</li>
<li>而且需要通过<code>web</code>服务器监听端口，<code>socket</code>不能监听端口，有人访问端口才能建立连接，所以先创建<code>web</code>服务器</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入http模块</span></span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 面向express框架开发，加载express框架，方便处理get,post请求</span></span><br><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建web服务器</span></span><br><span class="line"><span class="keyword">var</span> server = http.Server(express)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入socket.io模块</span></span><br><span class="line"><span class="keyword">var</span> socketio = <span class="built_in">require</span>(<span class="string">'socket.io'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建爱你socket服务器</span></span><br><span class="line"><span class="keyword">var</span> serverSocket = socketio(server)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">server.listen(<span class="number">9090</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'监听9090'</span>)</span><br></pre></td></tr></table></figure>
<h4 id="建立socket连接"><a href="#建立socket连接" class="headerlink" title="建立socket连接"></a>建立socket连接</h4><ul>
<li>服务器不需要主动建立连接，建立连接是客户端的事情，服务器只需要监听连接</li>
<li>客户端主动连接会发送<code>connection</code>事件，服务端只需要监听<code>connection</code>事件有没有发送，就知道客户端有没有主动连接服务器</li>
<li><code>Socket.IO</code>本质是通过发送和接受事件触发服务器和客户端之间的通讯，任何能被编辑成<code>JSON</code>或二进制的对象都可以传递</li>
<li><code>socket.on</code>: 监听事件，这个方法会有两个参数，第一个参数是事件名称，第二个参数是监听事件的回调函数，监听到链接就会执行这个回调函数</li>
<li>监听<code>connection</code>，回调函数会传入一个连接好的<code>socket</code>，这个<code>socket</code>就是客户端的<code>socket</code></li>
<li><code>socket</code>连接原理，就是客户端和服务端通过<code>socket</code>连接，服务器有<code>socket</code>，客户端也有</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 监听客户端有没有连接成功,如果连接成功,服务端会发送connection事件,通知客户端连接成功</span></span><br><span class="line"><span class="comment">// serverSocket: 服务端, clientSocket: 客户端</span></span><br><span class="line">serverSocket.on(<span class="string">'connection'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">clientSocket</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 建立socket连接成功</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'建立连接成功'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(clientSocket)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h3 id="Socket-IO客户端"><a href="#Socket-IO客户端" class="headerlink" title="Socket.IO客户端"></a>Socket.IO客户端</h3><ul>
<li><a href="https://github.com/socketio/socket.io-client-swift" target="_blank" rel="noopener">Socket.IO-Client-Swift</a>是<code>iOS</code>使用的库, 目前只有<code>Swift</code>版本</li>
<li>iOS中的使用</li>
</ul>
<h4 id="创建socket对象"><a href="#创建socket对象" class="headerlink" title="创建socket对象"></a>创建socket对象</h4><p>创建<code>SocketIOClient</code>对象, 两种创建方式</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第一种, SocketIOClientConfiguration: 可选参数</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">init</span>(socketURL: <span class="type">URL</span>, config: <span class="type">SocketIOClientConfiguration</span> = [])</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二种, 底层还是使用的第一种方式创建</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">convenience</span> <span class="keyword">init</span>(socketURL: <span class="type">URL</span>, config: [<span class="type">String</span>: <span class="type">Any</span>]?) &#123;</span><br><span class="line">        <span class="keyword">self</span>.<span class="keyword">init</span>(socketURL: socketURL, config: config?.toSocketConfiguration() ?? [])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>SocketIOClientConfiguration</code>: 是一个数组, 等同于<code>[SocketIOClientOption]</code></li>
<li><code>SocketIOClientOption</code>的所有取值如下</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">SocketIOClientOption</span> : <span class="title">ClientOption</span> </span>&#123;</span><br><span class="line">    <span class="comment">/// 使用压缩的方式进行传输</span></span><br><span class="line">    <span class="keyword">case</span> compress</span><br><span class="line">    <span class="comment">/// 通过字典内容连接</span></span><br><span class="line">    <span class="keyword">case</span> connectParams([<span class="type">String</span>: <span class="type">Any</span>])</span><br><span class="line">    <span class="comment">/// NSHTTPCookies的数组, 在握手过程中传递, Default is nil.</span></span><br><span class="line">    <span class="keyword">case</span> cookies([<span class="type">HTTPCookie</span>])</span><br><span class="line">    <span class="comment">/// 添加自定义请求头初始化来请求, 默认为nil</span></span><br><span class="line">    <span class="keyword">case</span> extraHeaders([<span class="type">String</span>: <span class="type">String</span>])</span><br><span class="line">    <span class="comment">/// 将为每个连接创建一个新的connect, 如果你在重新连接有bug时使用.</span></span><br><span class="line">    <span class="keyword">case</span> forceNew(<span class="type">Bool</span>)</span><br><span class="line">    <span class="comment">/// 传输是否使用HTTP长轮询, 默认false</span></span><br><span class="line">    <span class="keyword">case</span> forcePolling(<span class="type">Bool</span>)</span><br><span class="line">    <span class="comment">/// 是否使用 WebSockets. Default is `false`</span></span><br><span class="line">    <span class="keyword">case</span> forceWebsockets(<span class="type">Bool</span>)</span><br><span class="line">    <span class="comment">/// 调度handle的运行队列, 默认在主队列</span></span><br><span class="line">    <span class="keyword">case</span> handleQueue(<span class="type">DispatchQueue</span>)</span><br><span class="line">    <span class="comment">/// 是否打印调试信息. Default is false</span></span><br><span class="line">    <span class="keyword">case</span> log(<span class="type">Bool</span>)</span><br><span class="line">    <span class="comment">/// 可自定义SocketLogger调试日志</span></span><br><span class="line">    <span class="keyword">case</span> logger(<span class="type">SocketLogger</span>)</span><br><span class="line">    <span class="comment">/// 自定义服务器使用的路径.</span></span><br><span class="line">    <span class="keyword">case</span> path(<span class="type">String</span>)</span><br><span class="line">    <span class="comment">/// 链接失败时, 是否重新链接, Default is `true`</span></span><br><span class="line">    <span class="keyword">case</span> reconnects(<span class="type">Bool</span>)</span><br><span class="line">    <span class="comment">/// 重新连接多少次. Default is `-1` (无限次)</span></span><br><span class="line">    <span class="keyword">case</span> reconnectAttempts(<span class="type">Int</span>)</span><br><span class="line">    <span class="comment">/// 等待重连时间. Default is `10`</span></span><br><span class="line">    <span class="keyword">case</span> reconnectWait(<span class="type">Int</span>)</span><br><span class="line">    <span class="comment">/// 是否使用安全传输, Default is false</span></span><br><span class="line">    <span class="keyword">case</span> secure(<span class="type">Bool</span>)</span><br><span class="line">    <span class="comment">/// 设置允许那些证书有效</span></span><br><span class="line">    <span class="keyword">case</span> security(<span class="type">SSLSecurity</span>)</span><br><span class="line">    <span class="comment">/// 自签名只能用于开发模式</span></span><br><span class="line">    <span class="keyword">case</span> selfSigned(<span class="type">Bool</span>)</span><br><span class="line">    <span class="comment">/// NSURLSessionDelegate 底层引擎设置. 如果你需要处理自签名证书. Default is nil.</span></span><br><span class="line">    <span class="keyword">case</span> sessionDelegate(<span class="type">URLSessionDelegate</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>创建<code>SocketIOClient</code></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注意协议：ws开头</span></span><br><span class="line"><span class="keyword">guard</span> <span class="keyword">let</span> url = <span class="type">URL</span>(string: <span class="string">"ws://localhost:9090"</span>) <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line"><span class="keyword">let</span> manager = <span class="type">SocketManager</span>(socketURL: url, config: [.log(<span class="literal">true</span>), .compress])</span><br><span class="line"><span class="comment">// SocketIOClient</span></span><br><span class="line"><span class="keyword">let</span> socket = manager.defaultSocket</span><br></pre></td></tr></table></figure>
<h4 id="监听连接"><a href="#监听连接" class="headerlink" title="监听连接"></a>监听连接</h4><ul>
<li>创建好<code>socket</code>对象,然后连接用<code>connect</code>方法</li>
<li>因为<code>socket</code>需要进行3次握手，不可能马上建议连接，需要监听是否连接成功的回调,使用<code>on</code>方法</li>
<li><code>ON</code>方法两个参数<ul>
<li>参数一: 监听的事件名称，参数二：监听事件回调函数，会自动调用</li>
<li>回调函数也有两个参数(参数一：服务器传递的数据 参数二:确认请求数据<code>ACK</code>)</li>
<li>在<code>TCP/IP</code>协议中，如果接收方成功的接收到数据，那么会回复一个<code>ACK</code>数据- <code>ACK</code>只是一个标记，标记是否成功传输数据</li>
</ul>
</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 回调闭包</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">typealias</span> <span class="type">NormalCallback</span> = ([<span class="type">Any</span>], <span class="type">SocketAckEmitter</span>) -&gt; ()</span><br><span class="line"></span><br><span class="line"><span class="comment">// on方法</span></span><br><span class="line">@discardableResult</span><br><span class="line"><span class="keyword">open</span> <span class="function"><span class="keyword">func</span> <span class="title">on</span><span class="params">(<span class="number">_</span> event: String, callback: @escaping NormalCallback)</span></span> -&gt; <span class="type">UUID</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// SocketClientEvent: 接受枚举类型的on方法</span></span><br><span class="line">@discardableResult</span><br><span class="line"><span class="keyword">open</span> <span class="function"><span class="keyword">func</span> <span class="title">on</span><span class="params">(clientEvent event: SocketClientEvent, callback: @escaping NormalCallback)</span></span> -&gt; <span class="type">UUID</span> &#123;</span><br><span class="line">    <span class="comment">// 这里调用的是上面的on方法</span></span><br><span class="line">    <span class="keyword">return</span> on(event.rawValue, callback: callback)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>完整代码</p>
</blockquote>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">guard</span> <span class="keyword">let</span> url = <span class="type">URL</span>(string: <span class="string">"ws://localhost:9090"</span>) <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> manager = <span class="type">SocketManager</span>(socketURL: url, config: [.log(<span class="literal">true</span>), .compress])</span><br><span class="line"><span class="keyword">let</span> socket = manager.defaultSocket</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听链接成功</span></span><br><span class="line">socket.on(clientEvent: .connect) &#123; (data, ack) <span class="keyword">in</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"链接成功"</span>)</span><br><span class="line">    <span class="built_in">print</span>(data)</span><br><span class="line">    <span class="built_in">print</span>(ack)</span><br><span class="line">&#125;</span><br><span class="line">        </span><br><span class="line">socket.connect()</span><br></pre></td></tr></table></figure>
<h3 id="SocketIO事件"><a href="#SocketIO事件" class="headerlink" title="SocketIO事件"></a>SocketIO事件</h3><p><code>SocketIO</code>通过事件链接服务器和传递数据</p>
<h4 id="客户端监听事件"><a href="#客户端监听事件" class="headerlink" title="客户端监听事件"></a>客户端监听事件</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 监听链接成功</span></span><br><span class="line">socket.on(clientEvent: .connect) &#123; (data, ack) <span class="keyword">in</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"链接成功"</span>)</span><br><span class="line">    <span class="built_in">print</span>(data)</span><br><span class="line">    <span class="built_in">print</span>(ack)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="客户端发送事件"><a href="#客户端发送事件" class="headerlink" title="客户端发送事件"></a>客户端发送事件</h4><p>只有连接成功之后，才能发送事件</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 建立一个连接到服务器. 连接成功会触发 "connect"事件</span></span><br><span class="line"><span class="keyword">open</span> <span class="function"><span class="keyword">func</span> <span class="title">connect</span><span class="params">()</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 连接到服务器. 如果连接超时,会调用handle</span></span><br><span class="line"><span class="keyword">open</span> <span class="function"><span class="keyword">func</span> <span class="title">connect</span><span class="params">(timeoutAfter: Double, withHandler handler: <span class="params">(<span class="params">()</span></span></span></span> -&gt; ())?)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重开一个断开连接的socket</span></span><br><span class="line"><span class="keyword">open</span> <span class="function"><span class="keyword">func</span> <span class="title">disconnect</span><span class="params">()</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 向服务器发送事件, 参数一: 事件的名称，参数二: 传输的数据组</span></span><br><span class="line"><span class="keyword">open</span> <span class="function"><span class="keyword">func</span> <span class="title">emit</span><span class="params">(<span class="number">_</span> event: String, with items: [Any])</span></span></span><br></pre></td></tr></table></figure>
<h4 id="服务器监听事件"><a href="#服务器监听事件" class="headerlink" title="服务器监听事件"></a>服务器监听事件</h4><ul>
<li>监听客户端事件，需要嵌套在连接好的<code>connect</code>回调函数中</li>
<li>必须使用回调函数的<code>socket</code>参数，如<code>function(s)</code>中的s，监听事件,因此这是客户端的<code>socket</code>，肯定监听客户端发来的事件</li>
<li>服务器监听连接的回调函数的参数可以添加多个，具体看客户端传递数据数组有几个，每个参数都是与客户段一一对应，第一个参数对应客户端数组第0个数据</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 监听socket连接</span></span><br><span class="line">socket.on(<span class="string">'connection'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">s</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'监听到客户端连接'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// data:客户端数组第0个元素</span></span><br><span class="line">    <span class="comment">// data1:客户端数组第1个元素</span></span><br><span class="line">    s.on(<span class="string">'chat'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">data,data1</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'监听到chat事件'</span>);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">console</span>.log(data,data1);</span><br><span class="line">        </span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h4 id="服务器发送事件"><a href="#服务器发送事件" class="headerlink" title="服务器发送事件"></a>服务器发送事件</h4><p>这里的<code>socket</code>一定要用服务器端的<code>socket</code></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 给当前客户端发送数据，其他客户端收不到.</span></span><br><span class="line">socket.emit(<span class="string">'chat'</span>, <span class="string">'服务器'</span> + data)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发给所有客户端，不包含当前客户端</span></span><br><span class="line">socket.emit.broadcast.emit(<span class="string">'chat'</span>, <span class="string">'发给所有客户端,不包含当前客户端'</span> + data)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发给所有客户端，包含当前客户端</span></span><br><span class="line">socket.emit.sockets.emit(<span class="string">'chat'</span>, <span class="string">'发给所有客户端,包含当前客户端'</span> + data)</span><br></pre></td></tr></table></figure>
<h2 id="SocketIO分组"><a href="#SocketIO分组" class="headerlink" title="SocketIO分组"></a>SocketIO分组</h2><ul>
<li>每一个客户端和服务器只会保持一个<code>socket</code>链接, 那么怎么吧每一条信息推送到对应的聊天室, 针对多个聊天室的问题有如何解决</li>
<li>给每个聊天室都分组, 服务器就可以给指定的组进行数据的推送, 就不会影响到其他的聊天室</li>
</ul>
<h3 id="如何分组"><a href="#如何分组" class="headerlink" title="如何分组"></a>如何分组</h3><ul>
<li><code>socket.io</code>提供<a href="https://socket.io/docs/rooms-and-namespaces/" target="_blank" rel="noopener">rooms和namespace的API</a></li>
<li>用<code>rooms</code>的API就可以实现多房间聊天了，总结出来无外乎就是：<code>join/leave room</code> 和 <code>say to room</code></li>
<li>这里的<code>socket</code>是客户端的<code>socket</code>，也就是连接成功，传递过来的<code>socket</code></li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// join和leave</span></span><br><span class="line">io.on(<span class="string">'connection'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">socket</span>)</span>&#123;</span><br><span class="line">  socket.join(<span class="string">'some room'</span>);</span><br><span class="line">  <span class="comment">// socket.leave('some room');</span></span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// say to room</span></span><br><span class="line">io.to(<span class="string">'some room'</span>).emit(<span class="string">'some event'</span>):</span><br><span class="line">io.in(<span class="string">'some room'</span>).emit(<span class="string">'some event'</span>):</span><br></pre></td></tr></table></figure>
<h3 id="分组的原理"><a href="#分组的原理" class="headerlink" title="分组的原理"></a>分组的原理</h3><ul>
<li>只要客户端<code>socket</code>调用<code>join</code>，服务器就会把客户端<code>socket</code>和分组的名称绑定起来</li>
<li>到时候就可以根据分组的名称找到对应客户端的<code>socket</code>，就能给指定的客户端推送信息</li>
<li>一个客户端<code>socket</code>只能添加到一组，离开的时候，要记得移除</li>
</ul>
<hr>

      
    </div>
    
    
    

    
    
      <div>
        <div>
    
        <div style="text-align:center;color: #ccc;font-size:17px;">-------------本文结束<i class="fa fa-paw"></i>感谢您的阅读-------------</div>
    
</div>
      </div>
    
    
    
      <div>
        
      </div>
    

    
      <div>
        <div id="wechat_subscriber" style="display: block; padding: 10px 0; margin: 20px auto; width: 100%; text-align: center">
    <img id="wechat_subscriber_qcode" src="/images/wechat-qcode.jpg" alt="TitanKing wechat" style="width: 200px; max-width: 100%;"/>
    <div>欢迎您扫一扫上面的微信公众号，订阅我的博客！</div>
</div>

      </div>
    

    
      <div>
        <div style="padding: 10px 0; margin: 20px auto; width: 90%; text-align: center;">
  <div>坚持原创技术分享，您的支持将鼓励我继续创作！</div>
  <button id="rewardButton" disable="enable" onclick="var qr = document.getElementById('QR'); if (qr.style.display === 'none') {qr.style.display='block';} else {qr.style.display='none'}">
    <span>打赏</span>
  </button>
  <div id="QR" style="display: none;">

    
      <div id="wechat" style="display: inline-block">
        <img id="wechat_qr" src="/images/wechatpay.jpeg" alt="TitanKing 微信支付"/>
        <p>微信支付</p>
      </div>
    

    
      <div id="alipay" style="display: inline-block">
        <img id="alipay_qr" src="/images/alipay.jpeg" alt="TitanKing 支付宝"/>
        <p>支付宝</p>
      </div>
    

    

  </div>
</div>

      </div>
    

    
      <div>
        <ul class="post-copyright">
  <li class="post-copyright-author">
    <strong>本文作者：</strong>
    TitanKing
  </li>
  <li class="post-copyright-link">
    <strong>本文链接：</strong>
    <a href="https://titanjun.top/2018/11/16/Socket搭建即时通讯服务器/" title="Socket搭建即时通讯服务器">https://titanjun.top/2018/11/16/Socket搭建即时通讯服务器/</a>
  </li>
  <li class="post-copyright-license">
    <strong>版权声明： </strong>
    本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/3.0/" rel="external nofollow" target="_blank">CC BY-NC-SA 3.0</a> 许可协议。转载请注明出处！
  </li>
</ul>

      </div>
    

    <footer class="post-footer">
      
        <div class="post-tags">
          
            <a href="/tags/Node-js/" rel="tag"><i class="fa fa-tag"></i> Node.js</a>
          
            <a href="/tags/Socket/" rel="tag"><i class="fa fa-tag"></i> Socket</a>
          
            <a href="/tags/WebSocket/" rel="tag"><i class="fa fa-tag"></i> WebSocket</a>
          
            <a href="/tags/Socket-IO/" rel="tag"><i class="fa fa-tag"></i> Socket.IO</a>
          
        </div>
      

      
      
        <div class="post-widgets">
        
          <div class="wp_rating">
            <div style="color: rgba(0, 0, 0, 0.75); font-size:15px; letter-spacing:3px">(&gt;看完记得五星好评哦&lt;)</div>
            <div id="wpac-rating"></div>
          </div>
        

        

        
        </div>
      
      

      
        <div class="post-nav">
          <div class="post-nav-next post-nav-item">
            
          </div>

          <span class="post-nav-divider"></span>

          <div class="post-nav-prev post-nav-item">
            
              <a href="/2018/10/23/Hexo博客不蒜子统计不显示/" rel="next" title="Hexo博客不蒜子统计不显示">
                Hexo博客不蒜子统计不显示 <i class="fa fa-chevron-right"></i>
              </a>
            
          </div>
        </div>
      

      
      
    </footer>
  </div>
  
  
  
  </article>



    <div class="post-spread">
      
        <!--MOB SHARE BEGIN-->
<div class="-hoofoo-share-title">分享到：</div>
<div class="-hoofoo-share-buttons">
    <div class="-mob-share-weibo -hoofoo-share-weibo -hoofoo-share-ui-button"><i class="fa fa-weibo" aria-hidden="true"></i></div>
    <div class="-mob-share-weixin -hoofoo-share-weixin -hoofoo-share-ui-button"><i class="fa fa-weixin" aria-hidden="true"></i></div>
    <div class="-mob-share-qq -hoofoo-share-qq -hoofoo-share-ui-button"><i class="fa fa-qq" aria-hidden="true"></i></div>
    <div class="-mob-share-twitter -hoofoo-share-twitter -hoofoo-share-ui-button"><i class="fa fa-twitter" aria-hidden="true"></i></div>
    <div class="-hoofoo-share-more -hoofoo-share-ui-button -mob-share-open"><i class="fa fa-ellipsis-h" aria-hidden="true"></i></div>
</div>
<div class="-mob-share-ui" style="display: none">
    <ul class="-mob-share-list">
        <li class="-mob-share-weibo"><p>新浪微博</p></li>
        <li class="-mob-share-weixin"><p>微信</p></li>
        <li class="-mob-share-qzone"><p>QQ空间</p></li>
        <li class="-mob-share-qq"><p>QQ好友</p></li>
        <li class="-mob-share-tencentweibo"><p>腾讯微博</p></li>
        <li class="-mob-share-renren"><p>人人网</p></li>
        <li class="-mob-share-kaixin"><p>开心网</p></li>
        <li class="-mob-share-douban"><p>豆瓣</p></li>
        <li class="-mob-share-youdao"><p>有道云笔记</p></li>
        <li class="-mob-share-mingdao"><p>明道</p></li>
        <li class="-mob-share-pengyou"><p>朋友网</p></li>
        <li class="-mob-share-facebook"><p>Facebook</p></li>
        <li class="-mob-share-twitter"><p>Twitter</p></li>
        <li class="-mob-share-pocket"><p>Pocket</p></li>
        <li class="-mob-share-google"><p>Google+</p></li>
        <li class="-mob-share-tumblr"><p>Tumblr</p></li>
        <li class="-mob-share-instapaper"><p>Instapaper</p></li>
        <li class="-mob-share-linkedin"><p>Linkedin</p></li>
    </ul>
    <div class="-mob-share-close">取消</div>
</div>
<div class="-mob-share-ui-bg"></div>
<script id="-mob-share" src="https://f1.webshare.mob.com/code/mob-share.js?appkey=24fc497bb07bc"></script>
<!--MOB SHARE END-->
      
    </div>
  </div>


          </div>
          


          

  
    <div class="comments" id="comments">
      <div id="SOHUCS"></div>
    </div>

  



        </div>
        
          
  
  <div class="sidebar-toggle">
    <div class="sidebar-toggle-line-wrap">
      <span class="sidebar-toggle-line sidebar-toggle-line-first"></span>
      <span class="sidebar-toggle-line sidebar-toggle-line-middle"></span>
      <span class="sidebar-toggle-line sidebar-toggle-line-last"></span>
    </div>
  </div>

  <aside id="sidebar" class="sidebar">
    
      <div id="sidebar-dimmer"></div>
    
    <div class="sidebar-inner">

      

      
        <ul class="sidebar-nav motion-element">
          <li class="sidebar-nav-toc sidebar-nav-active" data-target="post-toc-wrap">
            文章目录
          </li>
          <li class="sidebar-nav-overview" data-target="site-overview-wrap">
            站点概览
          </li>
        </ul>
      

      <section class="site-overview-wrap sidebar-panel">
        <div class="site-overview">
          <div class="site-author motion-element" itemprop="author" itemscope itemtype="http://schema.org/Person">
            
              <a href="/" class="site-author-image" rel="start" style="border:none">
                <img class="site-author-image" itemprop="image"
                  src="/uploads/avatar.jpg"
                  alt="TitanKing" />
              </a>
            
              <p class="site-author-name" itemprop="name">TitanKing</p>
              <p class="site-description motion-element" itemprop="description">我还年轻，我渴望上路。带着最初的激情，追寻着最初的梦想，感受着最初的体验，我们上路吧!</p>
          </div>

          <nav class="site-state motion-element">

            
              <div class="site-state-item site-state-posts">
              
                <a href="/archives/">
              
                  <span class="site-state-item-count">82</span>
                  <span class="site-state-item-name">文章</span>
                </a>
              </div>
            

            
              
              
              <div class="site-state-item site-state-categories">
                <a href="/categories/index.html">
                  <span class="site-state-item-count">19</span>
                  <span class="site-state-item-name">分类</span>
                </a>
              </div>
            

            
              
              
              <div class="site-state-item site-state-tags">
                <a href="/tags/index.html">
                  <span class="site-state-item-count">126</span>
                  <span class="site-state-item-name">标签</span>
                </a>
              </div>
            

          </nav>

          
            <div class="feed-link motion-element">
              <a href="/atom.xml" rel="alternate">
                <i class="fa fa-rss"></i>
                RSS
              </a>
            </div>
          

          
            <div class="links-of-author motion-element">
                
                  <span class="links-of-author-item">
                    <a href="https://github.com/CoderTitan" target="_blank" title="GitHub">
                      
                        <i class="fa fa-fw fa-github"></i>GitHub</a>
                  </span>
                
                  <span class="links-of-author-item">
                    <a href="https://weibo.com/p/1005056052774133/home?from=page_100505&mod=TAB&is_all=1#place" target="_blank" title="新浪微博">
                      
                        <i class="fa fa-fw fa-globe"></i>新浪微博</a>
                  </span>
                
                  <span class="links-of-author-item">
                    <a href="https://www.jianshu.com/u/5bd5e9ed569e" target="_blank" title="简书">
                      
                        <i class="fa fa-fw fa-globe"></i>简书</a>
                  </span>
                
                  <span class="links-of-author-item">
                    <a href="http://blog.csdn.net/ShmilyCoder" target="_blank" title="CSDN">
                      
                        <i class="fa fa-fw fa-globe"></i>CSDN</a>
                  </span>
                
                  <span class="links-of-author-item">
                    <a href="https://juejin.im/user/5a7a64ae6fb9a0636323fd06/posts" target="_blank" title="稀土掘金">
                      
                        <i class="fa fa-fw fa-globe"></i>稀土掘金</a>
                  </span>
                
                  <span class="links-of-author-item">
                    <a href="/cdn-cgi/l/email-protection#fb8a8e9a95918e958fbbcacdc8d5989496" target="_blank" title="E-Mail">
                      
                        <i class="fa fa-fw fa-envelope"></i>E-Mail</a>
                  </span>
                
                  <span class="links-of-author-item">
                    <a href="https://twitter.com/CoderTitan" target="_blank" title="Twitter">
                      
                        <i class="fa fa-fw fa-twitter"></i>Twitter</a>
                  </span>
                
            </div>
          

          
          

          
          
        </div>
      </section>

      
      <!--noindex-->
        <section class="post-toc-wrap motion-element sidebar-panel sidebar-panel-active">
          <div class="post-toc">

            
              
            

            
              <div class="post-toc-content"><ol class="nav"><li class="nav-item nav-level-2"><a class="nav-link" href="#即时通讯"><span class="nav-number">1.</span> <span class="nav-text">即时通讯</span></a><ol class="nav-child"><li class="nav-item nav-level-3"><a class="nav-link" href="#IM通信原理"><span class="nav-number">1.1.</span> <span class="nav-text">IM通信原理</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#即时通讯连接原理"><span class="nav-number">1.2.</span> <span class="nav-text">即时通讯连接原理</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#即时通讯数据传递方式"><span class="nav-number">1.3.</span> <span class="nav-text">即时通讯数据传递方式</span></a><ol class="nav-child"><li class="nav-item nav-level-4"><a class="nav-link" href="#短轮询"><span class="nav-number">1.3.1.</span> <span class="nav-text">短轮询:</span></a></li><li class="nav-item nav-level-4"><a class="nav-link" href="#长轮询"><span class="nav-number">1.3.2.</span> <span class="nav-text">长轮询:</span></a></li><li class="nav-item nav-level-4"><a class="nav-link" href="#SSE"><span class="nav-number">1.3.3.</span> <span class="nav-text">SSE</span></a></li><li class="nav-item nav-level-4"><a class="nav-link" href="#WebSocket"><span class="nav-number">1.3.4.</span> <span class="nav-text">WebSocket</span></a></li></ol></li></ol></li><li class="nav-item nav-level-2"><a class="nav-link" href="#WebSocket-1"><span class="nav-number">2.</span> <span class="nav-text">WebSocket</span></a><ol class="nav-child"><li class="nav-item nav-level-3"><a class="nav-link" href="#WebSocket如何工作"><span class="nav-number">2.1.</span> <span class="nav-text">WebSocket如何工作</span></a><ol class="nav-child"><li class="nav-item nav-level-4"><a class="nav-link" href="#Websocket协议"><span class="nav-number">2.1.1.</span> <span class="nav-text">Websocket协议</span></a></li></ol></li><li class="nav-item nav-level-3"><a class="nav-link" href="#WebSocket客户端"><span class="nav-number">2.2.</span> <span class="nav-text">WebSocket客户端</span></a><ol class="nav-child"><li class="nav-item nav-level-4"><a class="nav-link" href="#客户端-API"><span class="nav-number">2.2.1.</span> <span class="nav-text">客户端 API</span></a></li><li class="nav-item nav-level-4"><a class="nav-link" href="#WebSocket属性"><span class="nav-number">2.2.2.</span> <span class="nav-text">WebSocket属性</span></a></li><li class="nav-item nav-level-4"><a class="nav-link" href="#WebSocket事件"><span class="nav-number">2.2.3.</span> <span class="nav-text">WebSocket事件</span></a></li><li class="nav-item nav-level-4"><a class="nav-link" href="#WebSocket方法"><span class="nav-number">2.2.4.</span> <span class="nav-text">WebSocket方法</span></a></li></ol></li><li class="nav-item nav-level-3"><a class="nav-link" href="#WebSocket服务端"><span class="nav-number">2.3.</span> <span class="nav-text">WebSocket服务端</span></a></li></ol></li><li class="nav-item nav-level-2"><a class="nav-link" href="#Socket-IO"><span class="nav-number">3.</span> <span class="nav-text">Socket.IO</span></a><ol class="nav-child"><li class="nav-item nav-level-3"><a class="nav-link" href="#Socket-IO服务端"><span class="nav-number">3.1.</span> <span class="nav-text">Socket.IO服务端</span></a><ol class="nav-child"><li class="nav-item nav-level-4"><a class="nav-link" href="#导入Socket-IO库"><span class="nav-number">3.1.1.</span> <span class="nav-text">导入Socket.IO库</span></a></li><li class="nav-item nav-level-4"><a class="nav-link" href="#创建socket"><span class="nav-number">3.1.2.</span> <span class="nav-text">创建socket</span></a></li><li class="nav-item nav-level-4"><a class="nav-link" href="#建立socket连接"><span class="nav-number">3.1.3.</span> <span class="nav-text">建立socket连接</span></a></li></ol></li><li class="nav-item nav-level-3"><a class="nav-link" href="#Socket-IO客户端"><span class="nav-number">3.2.</span> <span class="nav-text">Socket.IO客户端</span></a><ol class="nav-child"><li class="nav-item nav-level-4"><a class="nav-link" href="#创建socket对象"><span class="nav-number">3.2.1.</span> <span class="nav-text">创建socket对象</span></a></li><li class="nav-item nav-level-4"><a class="nav-link" href="#监听连接"><span class="nav-number">3.2.2.</span> <span class="nav-text">监听连接</span></a></li></ol></li><li class="nav-item nav-level-3"><a class="nav-link" href="#SocketIO事件"><span class="nav-number">3.3.</span> <span class="nav-text">SocketIO事件</span></a><ol class="nav-child"><li class="nav-item nav-level-4"><a class="nav-link" href="#客户端监听事件"><span class="nav-number">3.3.1.</span> <span class="nav-text">客户端监听事件</span></a></li><li class="nav-item nav-level-4"><a class="nav-link" href="#客户端发送事件"><span class="nav-number">3.3.2.</span> <span class="nav-text">客户端发送事件</span></a></li><li class="nav-item nav-level-4"><a class="nav-link" href="#服务器监听事件"><span class="nav-number">3.3.3.</span> <span class="nav-text">服务器监听事件</span></a></li><li class="nav-item nav-level-4"><a class="nav-link" href="#服务器发送事件"><span class="nav-number">3.3.4.</span> <span class="nav-text">服务器发送事件</span></a></li></ol></li></ol></li><li class="nav-item nav-level-2"><a class="nav-link" href="#SocketIO分组"><span class="nav-number">4.</span> <span class="nav-text">SocketIO分组</span></a><ol class="nav-child"><li class="nav-item nav-level-3"><a class="nav-link" href="#如何分组"><span class="nav-number">4.1.</span> <span class="nav-text">如何分组</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#分组的原理"><span class="nav-number">4.2.</span> <span class="nav-text">分组的原理</span></a></li></ol></li></ol></div>
            

          </div>
        </section>
      <!--/noindex-->
      

      

    </div>
  </aside>

  



        
      </div>
    </main>

    <footer id="footer" class="footer">
      <div class="footer-inner">
        <script data-cfasync="false" src="/cdn-cgi/scripts/5c5dd728/cloudflare-static/email-decode.min.js"></script><script async src="https://dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js"></script>
<div class="copyright">&copy; 2016 &mdash; <span itemprop="copyrightYear">2018</span>
  <span class="with-love" id="heart">
    <i class="fa fa-heart"></i>
  </span>
  <span class="author" itemprop="copyrightHolder">TitanKing</span>

  &nbsp;&nbsp;|&nbsp;&nbsp;<span><a href="/sitemap.xml">Google网站地图</a></span>
  &nbsp;&nbsp;|&nbsp;&nbsp;<span><a href="/baidusitemap.xml">百度网站地图</a></span>

  
</div>

<div class="powered-by">
<i class="fa fa-user-md"></i><span id="busuanzi_container_site_pv">
  本站总访客数:<span id="busuanzi_value_site_pv"></span>
</span>
</div>

&nbsp;&nbsp;|&nbsp;&nbsp;您是第 <span id="busuanzi_value_site_uv"></span> 位访客

<span>|</span>

<!--

  <div class="powered-by">由 <a class="theme-link" target="_blank" href="https://hexo.io">Hexo</a> 强力驱动</div>



  <span class="post-meta-divider">|</span>



  <div class="theme-info">主题 &mdash; <a class="theme-link" target="_blank" href="https://github.com/iissnan/hexo-theme-next">NexT.Pisces</a> v5.1.4</div>

-->




<div class="theme-info">
  <div class="powered-by"></div>
  <span class="post-count">博客全站共202.9k字</span>
</div>



<div class="weixin-box">
  <div class="weixin-menu">
    <div class="weixin-hover">
      <div class="weixin-description">微信扫一扫，订阅本博客</div>
    </div>
  </div>
</div>

        
<div class="busuanzi-count">
  <script async src="https://busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js"></script>

  

  
</div>








        
      </div>
    </footer>

    
      <div class="back-to-top">
        <i class="fa fa-arrow-up"></i>
        
          <span id="scrollpercent"><span>0</span>%</span>
        
      </div>
    

    

  </div>

  

<script type="text/javascript">
  if (Object.prototype.toString.call(window.Promise) !== '[object Function]') {
    window.Promise = null;
  }
</script>









  






  
  







  
  
    <script type="text/javascript" src="/lib/jquery/index.js?v=2.1.3"></script>
  

  
  
    <script type="text/javascript" src="/lib/fastclick/lib/fastclick.min.js?v=1.0.6"></script>
  

  
  
    <script type="text/javascript" src="/lib/jquery_lazyload/jquery.lazyload.js?v=1.9.7"></script>
  

  
  
    <script type="text/javascript" src="/lib/velocity/velocity.min.js?v=1.2.1"></script>
  

  
  
    <script type="text/javascript" src="/lib/velocity/velocity.ui.min.js?v=1.2.1"></script>
  

  
  
    <script type="text/javascript" src="/lib/fancybox/source/jquery.fancybox.pack.js?v=2.1.5"></script>
  

  
  
    <script type="text/javascript" src="/lib/three/three.min.js"></script>
  

  
  
    <script type="text/javascript" src="/lib/three/canvas_lines.min.js"></script>
  


  


  <script type="text/javascript" src="/js/src/utils.js?v=5.1.4"></script>

  <script type="text/javascript" src="/js/src/motion.js?v=5.1.4"></script>



  
  


  <script type="text/javascript" src="/js/src/affix.js?v=5.1.4"></script>

  <script type="text/javascript" src="/js/src/schemes/pisces.js?v=5.1.4"></script>



  
  <script type="text/javascript" src="/js/src/scrollspy.js?v=5.1.4"></script>
<script type="text/javascript" src="/js/src/post-details.js?v=5.1.4"></script>



  


  <script type="text/javascript" src="/js/src/bootstrap.js?v=5.1.4"></script>



  


  




	





  





  










  <script src="//cdn1.lncld.net/static/js/3.0.4/av-min.js"></script>
  <script src="/js/src/Valine.min.js"></script>
  
  <script type="text/javascript">
    var GUEST = ['nick','mail','link'];
    var guest = 'nick,mail,link';
    guest = guest.split(',').filter(item=>{
      return GUEST.indexOf(item)>-1;
    });
    new Valine({
        av: AV, 
        el: '#comments' ,
        verify: false,
        notify: true,
        appId: 'm7FB3zoFkQnVKAyykKJlY8QR-gzGzoHsz',
        appKey: '7X31Wl5lm6BXqgtV9k3sm7yI',
        placeholder: '在这里说点什么吧...',
        avatar:'identicon',
        guest_info:guest,
        pageSize:'10' || 10,
    });
  </script>



  

  <script type="text/javascript">
    // Popup Window;
    var isfetched = false;
    var isXml = true;
    // Search DB path;
    var search_path = "search.xml";
    if (search_path.length === 0) {
      search_path = "search.xml";
    } else if (/json$/i.test(search_path)) {
      isXml = false;
    }
    var path = "/" + search_path;
    // monitor main search box;

    var onPopupClose = function (e) {
      $('.popup').hide();
      $('#local-search-input').val('');
      $('.search-result-list').remove();
      $('#no-result').remove();
      $(".local-search-pop-overlay").remove();
      $('body').css('overflow', '');
    }

    function proceedsearch() {
      $("body")
        .append('<div class="search-popup-overlay local-search-pop-overlay"></div>')
        .css('overflow', 'hidden');
      $('.search-popup-overlay').click(onPopupClose);
      $('.popup').toggle();
      var $localSearchInput = $('#local-search-input');
      $localSearchInput.attr("autocapitalize", "none");
      $localSearchInput.attr("autocorrect", "off");
      $localSearchInput.focus();
    }

    // search function;
    var searchFunc = function(path, search_id, content_id) {
      'use strict';

      // start loading animation
      $("body")
        .append('<div class="search-popup-overlay local-search-pop-overlay">' +
          '<div id="search-loading-icon">' +
          '<i class="fa fa-spinner fa-pulse fa-5x fa-fw"></i>' +
          '</div>' +
          '</div>')
        .css('overflow', 'hidden');
      $("#search-loading-icon").css('margin', '20% auto 0 auto').css('text-align', 'center');

      $.ajax({
        url: path,
        dataType: isXml ? "xml" : "json",
        async: true,
        success: function(res) {
          // get the contents from search data
          isfetched = true;
          $('.popup').detach().appendTo('.header-inner');
          var datas = isXml ? $("entry", res).map(function() {
            return {
              title: $("title", this).text(),
              content: $("content",this).text(),
              url: $("url" , this).text()
            };
          }).get() : res;
          var input = document.getElementById(search_id);
          var resultContent = document.getElementById(content_id);
          var inputEventFunction = function() {
            var searchText = input.value.trim().toLowerCase();
            var keywords = searchText.split(/[\s\-]+/);
            if (keywords.length > 1) {
              keywords.push(searchText);
            }
            var resultItems = [];
            if (searchText.length > 0) {
              // perform local searching
              datas.forEach(function(data) {
                var isMatch = false;
                var hitCount = 0;
                var searchTextCount = 0;
                var title = data.title.trim();
                var titleInLowerCase = title.toLowerCase();
                var content = data.content.trim().replace(/<[^>]+>/g,"");
                var contentInLowerCase = content.toLowerCase();
                var articleUrl = decodeURIComponent(data.url);
                var indexOfTitle = [];
                var indexOfContent = [];
                // only match articles with not empty titles
                if(title != '') {
                  keywords.forEach(function(keyword) {
                    function getIndexByWord(word, text, caseSensitive) {
                      var wordLen = word.length;
                      if (wordLen === 0) {
                        return [];
                      }
                      var startPosition = 0, position = [], index = [];
                      if (!caseSensitive) {
                        text = text.toLowerCase();
                        word = word.toLowerCase();
                      }
                      while ((position = text.indexOf(word, startPosition)) > -1) {
                        index.push({position: position, word: word});
                        startPosition = position + wordLen;
                      }
                      return index;
                    }

                    indexOfTitle = indexOfTitle.concat(getIndexByWord(keyword, titleInLowerCase, false));
                    indexOfContent = indexOfContent.concat(getIndexByWord(keyword, contentInLowerCase, false));
                  });
                  if (indexOfTitle.length > 0 || indexOfContent.length > 0) {
                    isMatch = true;
                    hitCount = indexOfTitle.length + indexOfContent.length;
                  }
                }

                // show search results

                if (isMatch) {
                  // sort index by position of keyword

                  [indexOfTitle, indexOfContent].forEach(function (index) {
                    index.sort(function (itemLeft, itemRight) {
                      if (itemRight.position !== itemLeft.position) {
                        return itemRight.position - itemLeft.position;
                      } else {
                        return itemLeft.word.length - itemRight.word.length;
                      }
                    });
                  });

                  // merge hits into slices

                  function mergeIntoSlice(text, start, end, index) {
                    var item = index[index.length - 1];
                    var position = item.position;
                    var word = item.word;
                    var hits = [];
                    var searchTextCountInSlice = 0;
                    while (position + word.length <= end && index.length != 0) {
                      if (word === searchText) {
                        searchTextCountInSlice++;
                      }
                      hits.push({position: position, length: word.length});
                      var wordEnd = position + word.length;

                      // move to next position of hit

                      index.pop();
                      while (index.length != 0) {
                        item = index[index.length - 1];
                        position = item.position;
                        word = item.word;
                        if (wordEnd > position) {
                          index.pop();
                        } else {
                          break;
                        }
                      }
                    }
                    searchTextCount += searchTextCountInSlice;
                    return {
                      hits: hits,
                      start: start,
                      end: end,
                      searchTextCount: searchTextCountInSlice
                    };
                  }

                  var slicesOfTitle = [];
                  if (indexOfTitle.length != 0) {
                    slicesOfTitle.push(mergeIntoSlice(title, 0, title.length, indexOfTitle));
                  }

                  var slicesOfContent = [];
                  while (indexOfContent.length != 0) {
                    var item = indexOfContent[indexOfContent.length - 1];
                    var position = item.position;
                    var word = item.word;
                    // cut out 100 characters
                    var start = position - 20;
                    var end = position + 80;
                    if(start < 0){
                      start = 0;
                    }
                    if (end < position + word.length) {
                      end = position + word.length;
                    }
                    if(end > content.length){
                      end = content.length;
                    }
                    slicesOfContent.push(mergeIntoSlice(content, start, end, indexOfContent));
                  }

                  // sort slices in content by search text's count and hits' count

                  slicesOfContent.sort(function (sliceLeft, sliceRight) {
                    if (sliceLeft.searchTextCount !== sliceRight.searchTextCount) {
                      return sliceRight.searchTextCount - sliceLeft.searchTextCount;
                    } else if (sliceLeft.hits.length !== sliceRight.hits.length) {
                      return sliceRight.hits.length - sliceLeft.hits.length;
                    } else {
                      return sliceLeft.start - sliceRight.start;
                    }
                  });

                  // select top N slices in content

                  var upperBound = parseInt('1');
                  if (upperBound >= 0) {
                    slicesOfContent = slicesOfContent.slice(0, upperBound);
                  }

                  // highlight title and content

                  function highlightKeyword(text, slice) {
                    var result = '';
                    var prevEnd = slice.start;
                    slice.hits.forEach(function (hit) {
                      result += text.substring(prevEnd, hit.position);
                      var end = hit.position + hit.length;
                      result += '<b class="search-keyword">' + text.substring(hit.position, end) + '</b>';
                      prevEnd = end;
                    });
                    result += text.substring(prevEnd, slice.end);
                    return result;
                  }

                  var resultItem = '';

                  if (slicesOfTitle.length != 0) {
                    resultItem += "<li><a href='" + articleUrl + "' class='search-result-title'>" + highlightKeyword(title, slicesOfTitle[0]) + "</a>";
                  } else {
                    resultItem += "<li><a href='" + articleUrl + "' class='search-result-title'>" + title + "</a>";
                  }

                  slicesOfContent.forEach(function (slice) {
                    resultItem += "<a href='" + articleUrl + "'>" +
                      "<p class=\"search-result\">" + highlightKeyword(content, slice) +
                      "...</p>" + "</a>";
                  });

                  resultItem += "</li>";
                  resultItems.push({
                    item: resultItem,
                    searchTextCount: searchTextCount,
                    hitCount: hitCount,
                    id: resultItems.length
                  });
                }
              })
            };
            if (keywords.length === 1 && keywords[0] === "") {
              resultContent.innerHTML = '<div id="no-result"><i class="fa fa-search fa-5x" /></div>'
            } else if (resultItems.length === 0) {
              resultContent.innerHTML = '<div id="no-result"><i class="fa fa-frown-o fa-5x" /></div>'
            } else {
              resultItems.sort(function (resultLeft, resultRight) {
                if (resultLeft.searchTextCount !== resultRight.searchTextCount) {
                  return resultRight.searchTextCount - resultLeft.searchTextCount;
                } else if (resultLeft.hitCount !== resultRight.hitCount) {
                  return resultRight.hitCount - resultLeft.hitCount;
                } else {
                  return resultRight.id - resultLeft.id;
                }
              });
              var searchResultList = '<ul class=\"search-result-list\">';
              resultItems.forEach(function (result) {
                searchResultList += result.item;
              })
              searchResultList += "</ul>";
              resultContent.innerHTML = searchResultList;
            }
          }

          if ('auto' === 'auto') {
            input.addEventListener('input', inputEventFunction);
          } else {
            $('.search-icon').click(inputEventFunction);
            input.addEventListener('keypress', function (event) {
              if (event.keyCode === 13) {
                inputEventFunction();
              }
            });
          }

          // remove loading animation
          $(".local-search-pop-overlay").remove();
          $('body').css('overflow', '');

          proceedsearch();
        }
      });
    }

    // handle and trigger popup window;
    $('.popup-trigger').click(function(e) {
      e.stopPropagation();
      if (isfetched === false) {
        searchFunc(path, 'local-search-input', 'local-search-result');
      } else {
        proceedsearch();
      };
    });

    $('.popup-btn-close').click(onPopupClose);
    $('.popup').click(function(e){
      e.stopPropagation();
    });
    $(document).on('keyup', function (event) {
      var shouldDismissSearchPopup = event.which === 27 &&
        $('.search-popup').is(':visible');
      if (shouldDismissSearchPopup) {
        onPopupClose();
      }
    });
  </script>





  

  
  <script src="https://cdn1.lncld.net/static/js/av-core-mini-0.6.4.js"></script>
  <script>AV.initialize("m7FB3zoFkQnVKAyykKJlY8QR-gzGzoHsz", "7X31Wl5lm6BXqgtV9k3sm7yI");</script>
  <script>
    function showTime(Counter) {
      var query = new AV.Query(Counter);
      var entries = [];
      var $visitors = $(".leancloud_visitors");

      $visitors.each(function () {
        entries.push( $(this).attr("id").trim() );
      });

      query.containedIn('url', entries);
      query.find()
        .done(function (results) {
          var COUNT_CONTAINER_REF = '.leancloud-visitors-count';

          if (results.length === 0) {
            $visitors.find(COUNT_CONTAINER_REF).text(0);
            return;
          }

          for (var i = 0; i < results.length; i++) {
            var item = results[i];
            var url = item.get('url');
            var time = item.get('time');
            var element = document.getElementById(url);

            $(element).find(COUNT_CONTAINER_REF).text(time);
          }
          for(var i = 0; i < entries.length; i++) {
            var url = entries[i];
            var element = document.getElementById(url);
            var countSpan = $(element).find(COUNT_CONTAINER_REF);
            if( countSpan.text() == '') {
              countSpan.text(0);
            }
          }
        })
        .fail(function (object, error) {
          console.log("Error: " + error.code + " " + error.message);
        });
    }

    function addCount(Counter) {
      var $visitors = $(".leancloud_visitors");
      var url = $visitors.attr('id').trim();
      var title = $visitors.attr('data-flag-title').trim();
      var query = new AV.Query(Counter);

      query.equalTo("url", url);
      query.find({
        success: function(results) {
          if (results.length > 0) {
            var counter = results[0];
            counter.fetchWhenSave(true);
            counter.increment("time");
            counter.save(null, {
              success: function(counter) {
                var $element = $(document.getElementById(url));
                $element.find('.leancloud-visitors-count').text(counter.get('time'));
              },
              error: function(counter, error) {
                console.log('Failed to save Visitor num, with error message: ' + error.message);
              }
            });
          } else {
            var newcounter = new Counter();
            /* Set ACL */
            var acl = new AV.ACL();
            acl.setPublicReadAccess(true);
            acl.setPublicWriteAccess(true);
            newcounter.setACL(acl);
            /* End Set ACL */
            newcounter.set("title", title);
            newcounter.set("url", url);
            newcounter.set("time", 1);
            newcounter.save(null, {
              success: function(newcounter) {
                var $element = $(document.getElementById(url));
                $element.find('.leancloud-visitors-count').text(newcounter.get('time'));
              },
              error: function(newcounter, error) {
                console.log('Failed to create');
              }
            });
          }
        },
        error: function(error) {
          console.log('Error:' + error.code + " " + error.message);
        }
      });
    }

    $(function() {
      var Counter = AV.Object.extend("Counter");
      if ($('.leancloud_visitors').length == 1) {
        addCount(Counter);
      } else if ($('.post-title-link').length > 1) {
        showTime(Counter);
      }
    });
  </script>



  

  
<script>
(function(){
    var bp = document.createElement('script');
    var curProtocol = window.location.protocol.split(':')[0];
    if (curProtocol === 'https') {
        bp.src = 'https://zz.bdstatic.com/linksubmit/push.js';        
    }
    else {
        bp.src = 'http://push.zhanzhang.baidu.com/push.js';
    }
    var s = document.getElementsByTagName("script")[0];
    s.parentNode.insertBefore(bp, s);
})();
</script>


  
  
  <script type="text/javascript">
  wpac_init = window.wpac_init || [];
  wpac_init.push({widget: 'Rating', id: 10998,
    el: 'wpac-rating',
    color: 'f79533'
  });
  (function() {
    if ('WIDGETPACK_LOADED' in window) return;
    WIDGETPACK_LOADED = true;
    var mc = document.createElement('script');
    mc.type = 'text/javascript';
    mc.async = true;
    mc.src = '//embed.widgetpack.com/widget.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(mc, s.nextSibling);
  })();
  </script>


  

  

  

  
<script type="text/javascript">
    //微信二维码点击背景关闭
    $('body').delegate('.-mob-share-weixin-qrcode-bg','click', function(){
         $(".-mob-share-weixin-qrcode-close").trigger("click");
    }); 
</script>



<script>
(function(){
    var bp = document.createElement('script');
    var curProtocol = window.location.protocol.split(':')[0];
    if (curProtocol === 'https') {
        bp.src = 'https://zz.bdstatic.com/linksubmit/push.js';
    }
    else {
        bp.src = 'http://push.zhanzhang.baidu.com/push.js';
    }
    var s = document.getElementsByTagName("script")[0];
    s.parentNode.insertBefore(bp, s);
})();
</script>

<script type="text/javascript" src= "/source/js/src/instantclick.min.js" data-no-instant></script>
<script data-no-instant>InstantClick.init();</script>

</body>
</html>
